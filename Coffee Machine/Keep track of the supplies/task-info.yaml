type: edu
custom_name: stage5
files:
- name: machine/coffee_machine.py
  visible: true
  text: "woter = 200\nmilk = 50\ncoffe = 15\n\n#print('Write\_how\_many\_cups\_of\_\
    coffee\_you\_will')\ndef ansower():\n    while True:\n    \ttry:\n\t\t    ans\
    \ = int(input())\n    \texcept ValueError:\n\t\t    print('Incorrect ENTER')\n\
    \    \telse:\n    \t\treturn ans\n    \t\t\ndef coffe_need(water, milk, coffe,\
    \ cup):\n\tres_w = water // 200 - cup\n\tres_m = milk // 50 - cup\n\tres_c = coffe\
    \ // 15 - cup\n\tres = min(res_w, res_m, res_c)\n\tif res == 0:\n\t\tprint('Yes,\
    \ I can make that amount of coffee')\n\telif res > 0:\n\t\tprint(f'Yes, I can\
    \ make that amount of coffee (and even {res} more than that)')\n\telse:\t\n\t\t\
    print(f'No, I can make only {res + cup} cups of coffee')\n\n#cup_of_coffe = ansower()\n\
    \n#w = woter * cup_of_coffe\n#m = milk * cup_of_coffe\n#c = coffe * cup_of_coffe\n\
    \n#if cup_of_coffe > 1:\n#\tcup = 'cups'\n#else:\n#\tcup = 'cup'\n#print(f'''For\_\
    {cup_of_coffe}\_{cup}\_of\_coffee\_you\_will\_need:\n#{w}\_ml\_of\_water\n#{m}\_\
    ml\_of\_milk\n#{c}\_g\_of\_coffee\_beans''')\n\nprint('Write how many ml of water\
    \ the coffee machine has:')\n\nwater_tenk = ansower()\n\nprint('Write\_how\_many\_\
    ml\_of\_milk\_the\_coffee\_machine\_has:')\n\nmilk_tenk = ansower()\n\nprint('Write\_\
    how\_many\_grams\_of\_coffee\_beans\_the\_coffee\_machine\_has:')\ncaffe_tenk\
    \ = ansower()\n\nprint('Write\_how\_many\_cups\_of\_coffee\_you\_will\_need:')\n\
    \ncup_of_coffe = ansower()\n\ncoffe_need(water_tenk, milk_tenk, caffe_tenk, cup_of_coffe)\n\
    \n\n\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5794#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 12 Jan 2022 20:55:33 UTC
record: 5
